// Code generated by MockGen. DO NOT EDIT.
// Source: interactor.go

// Package likepostreviewusecase is a generated GoMock package.
package likepostreviewusecase

import (
	context "context"
	entities "paradise-booking/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLikePostReviewStorage is a mock of LikePostReviewStorage interface.
type MockLikePostReviewStorage struct {
	ctrl     *gomock.Controller
	recorder *MockLikePostReviewStorageMockRecorder
}

// MockLikePostReviewStorageMockRecorder is the mock recorder for MockLikePostReviewStorage.
type MockLikePostReviewStorageMockRecorder struct {
	mock *MockLikePostReviewStorage
}

// NewMockLikePostReviewStorage creates a new mock instance.
func NewMockLikePostReviewStorage(ctrl *gomock.Controller) *MockLikePostReviewStorage {
	mock := &MockLikePostReviewStorage{ctrl: ctrl}
	mock.recorder = &MockLikePostReviewStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikePostReviewStorage) EXPECT() *MockLikePostReviewStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLikePostReviewStorage) Create(ctx context.Context, data *entities.LikePostReview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLikePostReviewStorageMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLikePostReviewStorage)(nil).Create), ctx, data)
}

// FindDataByCondition mocks base method.
func (m *MockLikePostReviewStorage) FindDataByCondition(ctx context.Context, condition map[string]interface{}) ([]*entities.LikePostReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDataByCondition", ctx, condition)
	ret0, _ := ret[0].([]*entities.LikePostReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDataByCondition indicates an expected call of FindDataByCondition.
func (mr *MockLikePostReviewStorageMockRecorder) FindDataByCondition(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDataByCondition", reflect.TypeOf((*MockLikePostReviewStorage)(nil).FindDataByCondition), ctx, condition)
}

// UpdateWithMap mocks base method.
func (m *MockLikePostReviewStorage) UpdateWithMap(ctx context.Context, data *entities.LikePostReview, props map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithMap", ctx, data, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithMap indicates an expected call of UpdateWithMap.
func (mr *MockLikePostReviewStorageMockRecorder) UpdateWithMap(ctx, data, props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithMap", reflect.TypeOf((*MockLikePostReviewStorage)(nil).UpdateWithMap), ctx, data, props)
}
