// Code generated by MockGen. DO NOT EDIT.
// Source: interactor.go

// Package calendarguiderusecase is a generated GoMock package.
package calendarguiderusecase

import (
	context "context"
	common "paradise-booking/common"
	entities "paradise-booking/entities"
	calendarguideriomodel "paradise-booking/modules/calendar_guider/iomodel"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCalendarGuiderStorage is a mock of CalendarGuiderStorage interface.
type MockCalendarGuiderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarGuiderStorageMockRecorder
}

// MockCalendarGuiderStorageMockRecorder is the mock recorder for MockCalendarGuiderStorage.
type MockCalendarGuiderStorageMockRecorder struct {
	mock *MockCalendarGuiderStorage
}

// NewMockCalendarGuiderStorage creates a new mock instance.
func NewMockCalendarGuiderStorage(ctrl *gomock.Controller) *MockCalendarGuiderStorage {
	mock := &MockCalendarGuiderStorage{ctrl: ctrl}
	mock.recorder = &MockCalendarGuiderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalendarGuiderStorage) EXPECT() *MockCalendarGuiderStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCalendarGuiderStorage) Create(ctx context.Context, data *entities.CalendarGuider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCalendarGuiderStorageMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCalendarGuiderStorage)(nil).Create), ctx, data)
}

// DeleteByID mocks base method.
func (m *MockCalendarGuiderStorage) DeleteByID(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockCalendarGuiderStorageMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockCalendarGuiderStorage)(nil).DeleteByID), ctx, id)
}

// GetByID mocks base method.
func (m *MockCalendarGuiderStorage) GetByID(ctx context.Context, id int) (*entities.CalendarGuider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.CalendarGuider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCalendarGuiderStorageMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCalendarGuiderStorage)(nil).GetByID), ctx, id)
}

// ListByFilter mocks base method.
func (m *MockCalendarGuiderStorage) ListByFilter(ctx context.Context, paging *common.Paging, filter *calendarguideriomodel.Filter) ([]*entities.CalendarGuider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByFilter", ctx, paging, filter)
	ret0, _ := ret[0].([]*entities.CalendarGuider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByFilter indicates an expected call of ListByFilter.
func (mr *MockCalendarGuiderStorageMockRecorder) ListByFilter(ctx, paging, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByFilter", reflect.TypeOf((*MockCalendarGuiderStorage)(nil).ListByFilter), ctx, paging, filter)
}

// UpdateByID mocks base method.
func (m *MockCalendarGuiderStorage) UpdateByID(ctx context.Context, id int, postGuideData *entities.CalendarGuider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, postGuideData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockCalendarGuiderStorageMockRecorder) UpdateByID(ctx, id, postGuideData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockCalendarGuiderStorage)(nil).UpdateByID), ctx, id, postGuideData)
}

// MockBookingGuiderSto is a mock of BookingGuiderSto interface.
type MockBookingGuiderSto struct {
	ctrl     *gomock.Controller
	recorder *MockBookingGuiderStoMockRecorder
}

// MockBookingGuiderStoMockRecorder is the mock recorder for MockBookingGuiderSto.
type MockBookingGuiderStoMockRecorder struct {
	mock *MockBookingGuiderSto
}

// NewMockBookingGuiderSto creates a new mock instance.
func NewMockBookingGuiderSto(ctrl *gomock.Controller) *MockBookingGuiderSto {
	mock := &MockBookingGuiderSto{ctrl: ctrl}
	mock.recorder = &MockBookingGuiderStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingGuiderSto) EXPECT() *MockBookingGuiderStoMockRecorder {
	return m.recorder
}

// ListByCondition mocks base method.
func (m *MockBookingGuiderSto) ListByCondition(ctx context.Context, conditions []common.Condition) ([]*entities.BookingGuider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByCondition", ctx, conditions)
	ret0, _ := ret[0].([]*entities.BookingGuider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByCondition indicates an expected call of ListByCondition.
func (mr *MockBookingGuiderStoMockRecorder) ListByCondition(ctx, conditions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByCondition", reflect.TypeOf((*MockBookingGuiderSto)(nil).ListByCondition), ctx, conditions)
}
