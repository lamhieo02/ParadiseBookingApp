// Code generated by MockGen. DO NOT EDIT.
// Source: interactor.go

// Package amenityusecase is a generated GoMock package.
package amenityusecase

import (
	context "context"
	entities "paradise-booking/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAmenityStorage is a mock of AmenityStorage interface.
type MockAmenityStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAmenityStorageMockRecorder
}

// MockAmenityStorageMockRecorder is the mock recorder for MockAmenityStorage.
type MockAmenityStorageMockRecorder struct {
	mock *MockAmenityStorage
}

// NewMockAmenityStorage creates a new mock instance.
func NewMockAmenityStorage(ctrl *gomock.Controller) *MockAmenityStorage {
	mock := &MockAmenityStorage{ctrl: ctrl}
	mock.recorder = &MockAmenityStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmenityStorage) EXPECT() *MockAmenityStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAmenityStorage) Create(ctx context.Context, data *entities.Amenity) (*entities.Amenity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(*entities.Amenity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAmenityStorageMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAmenityStorage)(nil).Create), ctx, data)
}

// Delete mocks base method.
func (m *MockAmenityStorage) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAmenityStorageMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAmenityStorage)(nil).Delete), ctx, id)
}

// DeleteByCondition mocks base method.
func (m *MockAmenityStorage) DeleteByCondition(ctx context.Context, condition map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByCondition", ctx, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByCondition indicates an expected call of DeleteByCondition.
func (mr *MockAmenityStorageMockRecorder) DeleteByCondition(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByCondition", reflect.TypeOf((*MockAmenityStorage)(nil).DeleteByCondition), ctx, condition)
}

// GetAllAmenityConfig mocks base method.
func (m *MockAmenityStorage) GetAllAmenityConfig(ctx context.Context, typeInt int) ([]entities.ConfigAmenity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAmenityConfig", ctx, typeInt)
	ret0, _ := ret[0].([]entities.ConfigAmenity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAmenityConfig indicates an expected call of GetAllAmenityConfig.
func (mr *MockAmenityStorageMockRecorder) GetAllAmenityConfig(ctx, typeInt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAmenityConfig", reflect.TypeOf((*MockAmenityStorage)(nil).GetAllAmenityConfig), ctx, typeInt)
}

// ListByObjectID mocks base method.
func (m *MockAmenityStorage) ListByObjectID(ctx context.Context, objectID, objectType int) ([]entities.Amenity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByObjectID", ctx, objectID, objectType)
	ret0, _ := ret[0].([]entities.Amenity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByObjectID indicates an expected call of ListByObjectID.
func (mr *MockAmenityStorageMockRecorder) ListByObjectID(ctx, objectID, objectType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByObjectID", reflect.TypeOf((*MockAmenityStorage)(nil).ListByObjectID), ctx, objectID, objectType)
}
