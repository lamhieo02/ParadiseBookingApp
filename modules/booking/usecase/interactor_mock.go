// Code generated by MockGen. DO NOT EDIT.
// Source: interactor.go

// Package bookingusecase is a generated GoMock package.
package bookingusecase

import (
	context "context"
	common "paradise-booking/common"
	entities "paradise-booking/entities"
	iomodel "paradise-booking/modules/booking/iomodel"
	bookingdetailstorage "paradise-booking/modules/booking_detail/storage"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockBookingStorage is a mock of BookingStorage interface.
type MockBookingStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBookingStorageMockRecorder
}

// MockBookingStorageMockRecorder is the mock recorder for MockBookingStorage.
type MockBookingStorageMockRecorder struct {
	mock *MockBookingStorage
}

// NewMockBookingStorage creates a new mock instance.
func NewMockBookingStorage(ctrl *gomock.Controller) *MockBookingStorage {
	mock := &MockBookingStorage{ctrl: ctrl}
	mock.recorder = &MockBookingStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingStorage) EXPECT() *MockBookingStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookingStorage) Create(ctx context.Context, data *entities.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookingStorageMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookingStorage)(nil).Create), ctx, data)
}

// DeleteByID mocks base method.
func (m *MockBookingStorage) DeleteByID(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockBookingStorageMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockBookingStorage)(nil).DeleteByID), ctx, id)
}

// GetBookingsWithinDateRange mocks base method.
func (m *MockBookingStorage) GetBookingsWithinDateRange(ctx context.Context, dateFrom, dateTo *time.Time) ([]entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingsWithinDateRange", ctx, dateFrom, dateTo)
	ret0, _ := ret[0].([]entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingsWithinDateRange indicates an expected call of GetBookingsWithinDateRange.
func (mr *MockBookingStorageMockRecorder) GetBookingsWithinDateRange(ctx, dateFrom, dateTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingsWithinDateRange", reflect.TypeOf((*MockBookingStorage)(nil).GetBookingsWithinDateRange), ctx, dateFrom, dateTo)
}

// GetByID mocks base method.
func (m *MockBookingStorage) GetByID(ctx context.Context, id int) (*entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBookingStorageMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookingStorage)(nil).GetByID), ctx, id)
}

// GetByPlaceID mocks base method.
func (m *MockBookingStorage) GetByPlaceID(ctx context.Context, placeId int, paging *common.Paging) ([]entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPlaceID", ctx, placeId, paging)
	ret0, _ := ret[0].([]entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPlaceID indicates an expected call of GetByPlaceID.
func (mr *MockBookingStorageMockRecorder) GetByPlaceID(ctx, placeId, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlaceID", reflect.TypeOf((*MockBookingStorage)(nil).GetByPlaceID), ctx, placeId, paging)
}

// ListAllBookingWithCondition mocks base method.
func (m *MockBookingStorage) ListAllBookingWithCondition(ctx context.Context, condition []common.Condition) ([]entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllBookingWithCondition", ctx, condition)
	ret0, _ := ret[0].([]entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllBookingWithCondition indicates an expected call of ListAllBookingWithCondition.
func (mr *MockBookingStorageMockRecorder) ListAllBookingWithCondition(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllBookingWithCondition", reflect.TypeOf((*MockBookingStorage)(nil).ListAllBookingWithCondition), ctx, condition)
}

// ListByFilter mocks base method.
func (m *MockBookingStorage) ListByFilter(ctx context.Context, filter *iomodel.FilterListBooking, paging *common.Paging, userId int) ([]entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByFilter", ctx, filter, paging, userId)
	ret0, _ := ret[0].([]entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByFilter indicates an expected call of ListByFilter.
func (mr *MockBookingStorageMockRecorder) ListByFilter(ctx, filter, paging, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByFilter", reflect.TypeOf((*MockBookingStorage)(nil).ListByFilter), ctx, filter, paging, userId)
}

// ListPlaceIds mocks base method.
func (m *MockBookingStorage) ListPlaceIds(ctx context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaceIds", ctx)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaceIds indicates an expected call of ListPlaceIds.
func (mr *MockBookingStorageMockRecorder) ListPlaceIds(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaceIds", reflect.TypeOf((*MockBookingStorage)(nil).ListPlaceIds), ctx)
}

// UpdateStatus mocks base method.
func (m *MockBookingStorage) UpdateStatus(ctx context.Context, bookingID, status int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, bookingID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockBookingStorageMockRecorder) UpdateStatus(ctx, bookingID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockBookingStorage)(nil).UpdateStatus), ctx, bookingID, status)
}

// MockBookingDetailStorage is a mock of BookingDetailStorage interface.
type MockBookingDetailStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBookingDetailStorageMockRecorder
}

// MockBookingDetailStorageMockRecorder is the mock recorder for MockBookingDetailStorage.
type MockBookingDetailStorageMockRecorder struct {
	mock *MockBookingDetailStorage
}

// NewMockBookingDetailStorage creates a new mock instance.
func NewMockBookingDetailStorage(ctrl *gomock.Controller) *MockBookingDetailStorage {
	mock := &MockBookingDetailStorage{ctrl: ctrl}
	mock.recorder = &MockBookingDetailStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingDetailStorage) EXPECT() *MockBookingDetailStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookingDetailStorage) Create(ctx context.Context, data *entities.BookingDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookingDetailStorageMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookingDetailStorage)(nil).Create), ctx, data)
}

// CreateTx mocks base method.
func (m *MockBookingDetailStorage) CreateTx(ctx context.Context, createBookingDetailTxParam bookingdetailstorage.CreateBookingDetailTxParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx, createBookingDetailTxParam)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockBookingDetailStorageMockRecorder) CreateTx(ctx, createBookingDetailTxParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockBookingDetailStorage)(nil).CreateTx), ctx, createBookingDetailTxParam)
}

// GetByBookingID mocks base method.
func (m *MockBookingDetailStorage) GetByBookingID(ctx context.Context, bookingId int) (*entities.BookingDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBookingID", ctx, bookingId)
	ret0, _ := ret[0].(*entities.BookingDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBookingID indicates an expected call of GetByBookingID.
func (mr *MockBookingDetailStorageMockRecorder) GetByBookingID(ctx, bookingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBookingID", reflect.TypeOf((*MockBookingDetailStorage)(nil).GetByBookingID), ctx, bookingId)
}

// MockAccountSto is a mock of AccountSto interface.
type MockAccountSto struct {
	ctrl     *gomock.Controller
	recorder *MockAccountStoMockRecorder
}

// MockAccountStoMockRecorder is the mock recorder for MockAccountSto.
type MockAccountStoMockRecorder struct {
	mock *MockAccountSto
}

// NewMockAccountSto creates a new mock instance.
func NewMockAccountSto(ctrl *gomock.Controller) *MockAccountSto {
	mock := &MockAccountSto{ctrl: ctrl}
	mock.recorder = &MockAccountStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountSto) EXPECT() *MockAccountStoMockRecorder {
	return m.recorder
}

// GetAccountByEmail mocks base method.
func (m *MockAccountSto) GetAccountByEmail(ctx context.Context, email string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByEmail", ctx, email)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByEmail indicates an expected call of GetAccountByEmail.
func (mr *MockAccountStoMockRecorder) GetAccountByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByEmail", reflect.TypeOf((*MockAccountSto)(nil).GetAccountByEmail), ctx, email)
}

// GetProfileByID mocks base method.
func (m *MockAccountSto) GetProfileByID(ctx context.Context, id int) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByID", ctx, id)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByID indicates an expected call of GetProfileByID.
func (mr *MockAccountStoMockRecorder) GetProfileByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByID", reflect.TypeOf((*MockAccountSto)(nil).GetProfileByID), ctx, id)
}

// MockPlaceSto is a mock of PlaceSto interface.
type MockPlaceSto struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceStoMockRecorder
}

// MockPlaceStoMockRecorder is the mock recorder for MockPlaceSto.
type MockPlaceStoMockRecorder struct {
	mock *MockPlaceSto
}

// NewMockPlaceSto creates a new mock instance.
func NewMockPlaceSto(ctrl *gomock.Controller) *MockPlaceSto {
	mock := &MockPlaceSto{ctrl: ctrl}
	mock.recorder = &MockPlaceStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceSto) EXPECT() *MockPlaceStoMockRecorder {
	return m.recorder
}

// GetPlaceByID mocks base method.
func (m *MockPlaceSto) GetPlaceByID(ctx context.Context, id int) (*entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceByID", ctx, id)
	ret0, _ := ret[0].(*entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaceByID indicates an expected call of GetPlaceByID.
func (mr *MockPlaceStoMockRecorder) GetPlaceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceByID", reflect.TypeOf((*MockPlaceSto)(nil).GetPlaceByID), ctx, id)
}

// ListPlaceByCondition mocks base method.
func (m *MockPlaceSto) ListPlaceByCondition(ctx context.Context, condition []common.Condition) ([]entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaceByCondition", ctx, condition)
	ret0, _ := ret[0].([]entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaceByCondition indicates an expected call of ListPlaceByCondition.
func (mr *MockPlaceStoMockRecorder) ListPlaceByCondition(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaceByCondition", reflect.TypeOf((*MockPlaceSto)(nil).ListPlaceByCondition), ctx, condition)
}

// ListPlaceInIds mocks base method.
func (m *MockPlaceSto) ListPlaceInIds(ctx context.Context, placeIds []int, vendorId int) ([]entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaceInIds", ctx, placeIds, vendorId)
	ret0, _ := ret[0].([]entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaceInIds indicates an expected call of ListPlaceInIds.
func (mr *MockPlaceStoMockRecorder) ListPlaceInIds(ctx, placeIds, vendorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaceInIds", reflect.TypeOf((*MockPlaceSto)(nil).ListPlaceInIds), ctx, placeIds, vendorId)
}

// ListPlaceNotInIds mocks base method.
func (m *MockPlaceSto) ListPlaceNotInIds(ctx context.Context, placeIds []int, vendorId int) ([]entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaceNotInIds", ctx, placeIds, vendorId)
	ret0, _ := ret[0].([]entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaceNotInIds indicates an expected call of ListPlaceNotInIds.
func (mr *MockPlaceStoMockRecorder) ListPlaceNotInIds(ctx, placeIds, vendorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaceNotInIds", reflect.TypeOf((*MockPlaceSto)(nil).ListPlaceNotInIds), ctx, placeIds, vendorId)
}

// UpdateWithMap mocks base method.
func (m *MockPlaceSto) UpdateWithMap(ctx context.Context, place *entities.Place, props map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithMap", ctx, place, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithMap indicates an expected call of UpdateWithMap.
func (mr *MockPlaceStoMockRecorder) UpdateWithMap(ctx, place, props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithMap", reflect.TypeOf((*MockPlaceSto)(nil).UpdateWithMap), ctx, place, props)
}

// MockPaymentSto is a mock of PaymentSto interface.
type MockPaymentSto struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentStoMockRecorder
}

// MockPaymentStoMockRecorder is the mock recorder for MockPaymentSto.
type MockPaymentStoMockRecorder struct {
	mock *MockPaymentSto
}

// NewMockPaymentSto creates a new mock instance.
func NewMockPaymentSto(ctrl *gomock.Controller) *MockPaymentSto {
	mock := &MockPaymentSto{ctrl: ctrl}
	mock.recorder = &MockPaymentStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentSto) EXPECT() *MockPaymentStoMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentSto) CreatePayment(ctx context.Context, payment *entities.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentStoMockRecorder) CreatePayment(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentSto)(nil).CreatePayment), ctx, payment)
}
