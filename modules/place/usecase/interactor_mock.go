// Code generated by MockGen. DO NOT EDIT.
// Source: interactor.go

// Package placeusecase is a generated GoMock package.
package placeusecase

import (
	context "context"
	common "paradise-booking/common"
	entities "paradise-booking/entities"
	iomodel "paradise-booking/modules/place/iomodel"
	googlemapprovider "paradise-booking/provider/googlemap"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockPlaceStorage is a mock of PlaceStorage interface.
type MockPlaceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceStorageMockRecorder
}

// MockPlaceStorageMockRecorder is the mock recorder for MockPlaceStorage.
type MockPlaceStorageMockRecorder struct {
	mock *MockPlaceStorage
}

// NewMockPlaceStorage creates a new mock instance.
func NewMockPlaceStorage(ctrl *gomock.Controller) *MockPlaceStorage {
	mock := &MockPlaceStorage{ctrl: ctrl}
	mock.recorder = &MockPlaceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceStorage) EXPECT() *MockPlaceStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlaceStorage) Create(ctx context.Context, data *entities.Place) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPlaceStorageMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlaceStorage)(nil).Create), ctx, data)
}

// DeleteByID mocks base method.
func (m *MockPlaceStorage) DeleteByID(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockPlaceStorageMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockPlaceStorage)(nil).DeleteByID), ctx, id)
}

// GetPlaceByCondition mocks base method.
func (m *MockPlaceStorage) GetPlaceByCondition(ctx context.Context, condition map[string]interface{}) ([]entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceByCondition", ctx, condition)
	ret0, _ := ret[0].([]entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaceByCondition indicates an expected call of GetPlaceByCondition.
func (mr *MockPlaceStorageMockRecorder) GetPlaceByCondition(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceByCondition", reflect.TypeOf((*MockPlaceStorage)(nil).GetPlaceByCondition), ctx, condition)
}

// GetPlaceByID mocks base method.
func (m *MockPlaceStorage) GetPlaceByID(ctx context.Context, id int) (*entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceByID", ctx, id)
	ret0, _ := ret[0].(*entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaceByID indicates an expected call of GetPlaceByID.
func (mr *MockPlaceStorageMockRecorder) GetPlaceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceByID", reflect.TypeOf((*MockPlaceStorage)(nil).GetPlaceByID), ctx, id)
}

// GetPlaceByLatLng mocks base method.
func (m *MockPlaceStorage) GetPlaceByLatLng(ctx context.Context, lat, lng float64) ([]*entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceByLatLng", ctx, lat, lng)
	ret0, _ := ret[0].([]*entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaceByLatLng indicates an expected call of GetPlaceByLatLng.
func (mr *MockPlaceStorageMockRecorder) GetPlaceByLatLng(ctx, lat, lng interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceByLatLng", reflect.TypeOf((*MockPlaceStorage)(nil).GetPlaceByLatLng), ctx, lat, lng)
}

// GetRatingAverageByPlaceId mocks base method.
func (m *MockPlaceStorage) GetRatingAverageByPlaceId(ctx context.Context, placeId int64) (*float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingAverageByPlaceId", ctx, placeId)
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingAverageByPlaceId indicates an expected call of GetRatingAverageByPlaceId.
func (mr *MockPlaceStorageMockRecorder) GetRatingAverageByPlaceId(ctx, placeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingAverageByPlaceId", reflect.TypeOf((*MockPlaceStorage)(nil).GetRatingAverageByPlaceId), ctx, placeId)
}

// ListPlaceByVendorID mocks base method.
func (m *MockPlaceStorage) ListPlaceByVendorID(ctx context.Context, vendorID int, paging *common.Paging) ([]entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaceByVendorID", ctx, vendorID, paging)
	ret0, _ := ret[0].([]entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaceByVendorID indicates an expected call of ListPlaceByVendorID.
func (mr *MockPlaceStorageMockRecorder) ListPlaceByVendorID(ctx, vendorID, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaceByVendorID", reflect.TypeOf((*MockPlaceStorage)(nil).ListPlaceByVendorID), ctx, vendorID, paging)
}

// ListPlaces mocks base method.
func (m *MockPlaceStorage) ListPlaces(ctx context.Context, paging *common.Paging, filter *iomodel.Filter, address *googlemapprovider.GoogleMapAddress) ([]entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaces", ctx, paging, filter, address)
	ret0, _ := ret[0].([]entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaces indicates an expected call of ListPlaces.
func (mr *MockPlaceStorageMockRecorder) ListPlaces(ctx, paging, filter, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaces", reflect.TypeOf((*MockPlaceStorage)(nil).ListPlaces), ctx, paging, filter, address)
}

// UpdateByID mocks base method.
func (m *MockPlaceStorage) UpdateByID(ctx context.Context, id int, data *entities.Place) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockPlaceStorageMockRecorder) UpdateByID(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockPlaceStorage)(nil).UpdateByID), ctx, id, data)
}

// MockAccountStorage is a mock of AccountStorage interface.
type MockAccountStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAccountStorageMockRecorder
}

// MockAccountStorageMockRecorder is the mock recorder for MockAccountStorage.
type MockAccountStorageMockRecorder struct {
	mock *MockAccountStorage
}

// NewMockAccountStorage creates a new mock instance.
func NewMockAccountStorage(ctrl *gomock.Controller) *MockAccountStorage {
	mock := &MockAccountStorage{ctrl: ctrl}
	mock.recorder = &MockAccountStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountStorage) EXPECT() *MockAccountStorageMockRecorder {
	return m.recorder
}

// GetAccountByEmail mocks base method.
func (m *MockAccountStorage) GetAccountByEmail(ctx context.Context, email string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByEmail", ctx, email)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByEmail indicates an expected call of GetAccountByEmail.
func (mr *MockAccountStorageMockRecorder) GetAccountByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByEmail", reflect.TypeOf((*MockAccountStorage)(nil).GetAccountByEmail), ctx, email)
}

// MockPlaceStoCache is a mock of PlaceStoCache interface.
type MockPlaceStoCache struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceStoCacheMockRecorder
}

// MockPlaceStoCacheMockRecorder is the mock recorder for MockPlaceStoCache.
type MockPlaceStoCacheMockRecorder struct {
	mock *MockPlaceStoCache
}

// NewMockPlaceStoCache creates a new mock instance.
func NewMockPlaceStoCache(ctrl *gomock.Controller) *MockPlaceStoCache {
	mock := &MockPlaceStoCache{ctrl: ctrl}
	mock.recorder = &MockPlaceStoCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceStoCache) EXPECT() *MockPlaceStoCacheMockRecorder {
	return m.recorder
}

// GetRatingAverageByPlaceId mocks base method.
func (m *MockPlaceStoCache) GetRatingAverageByPlaceId(ctx context.Context, placeId int64) (*float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingAverageByPlaceId", ctx, placeId)
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingAverageByPlaceId indicates an expected call of GetRatingAverageByPlaceId.
func (mr *MockPlaceStoCacheMockRecorder) GetRatingAverageByPlaceId(ctx, placeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingAverageByPlaceId", reflect.TypeOf((*MockPlaceStoCache)(nil).GetRatingAverageByPlaceId), ctx, placeId)
}

// MockPlaceWishListSto is a mock of PlaceWishListSto interface.
type MockPlaceWishListSto struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceWishListStoMockRecorder
}

// MockPlaceWishListStoMockRecorder is the mock recorder for MockPlaceWishListSto.
type MockPlaceWishListStoMockRecorder struct {
	mock *MockPlaceWishListSto
}

// NewMockPlaceWishListSto creates a new mock instance.
func NewMockPlaceWishListSto(ctrl *gomock.Controller) *MockPlaceWishListSto {
	mock := &MockPlaceWishListSto{ctrl: ctrl}
	mock.recorder = &MockPlaceWishListStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceWishListSto) EXPECT() *MockPlaceWishListStoMockRecorder {
	return m.recorder
}

// GetByCondition mocks base method.
func (m *MockPlaceWishListSto) GetByCondition(ctx context.Context, condition map[string]interface{}) ([]entities.PlaceWishList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCondition", ctx, condition)
	ret0, _ := ret[0].([]entities.PlaceWishList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCondition indicates an expected call of GetByCondition.
func (mr *MockPlaceWishListStoMockRecorder) GetByCondition(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCondition", reflect.TypeOf((*MockPlaceWishListSto)(nil).GetByCondition), ctx, condition)
}

// MockBookingSto is a mock of BookingSto interface.
type MockBookingSto struct {
	ctrl     *gomock.Controller
	recorder *MockBookingStoMockRecorder
}

// MockBookingStoMockRecorder is the mock recorder for MockBookingSto.
type MockBookingStoMockRecorder struct {
	mock *MockBookingSto
}

// NewMockBookingSto creates a new mock instance.
func NewMockBookingSto(ctrl *gomock.Controller) *MockBookingSto {
	mock := &MockBookingSto{ctrl: ctrl}
	mock.recorder = &MockBookingStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingSto) EXPECT() *MockBookingStoMockRecorder {
	return m.recorder
}

// GetBookingsWithinDateRange mocks base method.
func (m *MockBookingSto) GetBookingsWithinDateRange(ctx context.Context, dateFrom, dateTo *time.Time) ([]entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingsWithinDateRange", ctx, dateFrom, dateTo)
	ret0, _ := ret[0].([]entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingsWithinDateRange indicates an expected call of GetBookingsWithinDateRange.
func (mr *MockBookingStoMockRecorder) GetBookingsWithinDateRange(ctx, dateFrom, dateTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingsWithinDateRange", reflect.TypeOf((*MockBookingSto)(nil).GetBookingsWithinDateRange), ctx, dateFrom, dateTo)
}

// ListAllBookingWithCondition mocks base method.
func (m *MockBookingSto) ListAllBookingWithCondition(ctx context.Context, condition []common.Condition) ([]entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllBookingWithCondition", ctx, condition)
	ret0, _ := ret[0].([]entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllBookingWithCondition indicates an expected call of ListAllBookingWithCondition.
func (mr *MockBookingStoMockRecorder) ListAllBookingWithCondition(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllBookingWithCondition", reflect.TypeOf((*MockBookingSto)(nil).ListAllBookingWithCondition), ctx, condition)
}

// MockPostGuideCache is a mock of PostGuideCache interface.
type MockPostGuideCache struct {
	ctrl     *gomock.Controller
	recorder *MockPostGuideCacheMockRecorder
}

// MockPostGuideCacheMockRecorder is the mock recorder for MockPostGuideCache.
type MockPostGuideCacheMockRecorder struct {
	mock *MockPostGuideCache
}

// NewMockPostGuideCache creates a new mock instance.
func NewMockPostGuideCache(ctrl *gomock.Controller) *MockPostGuideCache {
	mock := &MockPostGuideCache{ctrl: ctrl}
	mock.recorder = &MockPostGuideCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostGuideCache) EXPECT() *MockPostGuideCacheMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockPostGuideCache) GetByID(ctx context.Context, id int) (*entities.PostGuide, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.PostGuide)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPostGuideCacheMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostGuideCache)(nil).GetByID), ctx, id)
}

// MockPostGuideSto is a mock of PostGuideSto interface.
type MockPostGuideSto struct {
	ctrl     *gomock.Controller
	recorder *MockPostGuideStoMockRecorder
}

// MockPostGuideStoMockRecorder is the mock recorder for MockPostGuideSto.
type MockPostGuideStoMockRecorder struct {
	mock *MockPostGuideSto
}

// NewMockPostGuideSto creates a new mock instance.
func NewMockPostGuideSto(ctrl *gomock.Controller) *MockPostGuideSto {
	mock := &MockPostGuideSto{ctrl: ctrl}
	mock.recorder = &MockPostGuideStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostGuideSto) EXPECT() *MockPostGuideStoMockRecorder {
	return m.recorder
}

// ListPostGuideIdsByCondition mocks base method.
func (m *MockPostGuideSto) ListPostGuideIdsByCondition(ctx context.Context, limit int, condition map[string]interface{}) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostGuideIdsByCondition", ctx, limit, condition)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostGuideIdsByCondition indicates an expected call of ListPostGuideIdsByCondition.
func (mr *MockPostGuideStoMockRecorder) ListPostGuideIdsByCondition(ctx, limit, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostGuideIdsByCondition", reflect.TypeOf((*MockPostGuideSto)(nil).ListPostGuideIdsByCondition), ctx, limit, condition)
}
