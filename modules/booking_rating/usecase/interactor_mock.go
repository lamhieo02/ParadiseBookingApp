// Code generated by MockGen. DO NOT EDIT.
// Source: interactor.go

// Package bookingratingusecase is a generated GoMock package.
package bookingratingusecase

import (
	context "context"
	entities "paradise-booking/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookingRatingSto is a mock of BookingRatingSto interface.
type MockBookingRatingSto struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRatingStoMockRecorder
}

// MockBookingRatingStoMockRecorder is the mock recorder for MockBookingRatingSto.
type MockBookingRatingStoMockRecorder struct {
	mock *MockBookingRatingSto
}

// NewMockBookingRatingSto creates a new mock instance.
func NewMockBookingRatingSto(ctrl *gomock.Controller) *MockBookingRatingSto {
	mock := &MockBookingRatingSto{ctrl: ctrl}
	mock.recorder = &MockBookingRatingStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingRatingSto) EXPECT() *MockBookingRatingStoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookingRatingSto) Create(ctx context.Context, data *entities.BookingRating) (*entities.BookingRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(*entities.BookingRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBookingRatingStoMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookingRatingSto)(nil).Create), ctx, data)
}

// GetByCondition mocks base method.
func (m *MockBookingRatingSto) GetByCondition(ctx context.Context, condition map[string]interface{}) ([]entities.BookingRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCondition", ctx, condition)
	ret0, _ := ret[0].([]entities.BookingRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCondition indicates an expected call of GetByCondition.
func (mr *MockBookingRatingStoMockRecorder) GetByCondition(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCondition", reflect.TypeOf((*MockBookingRatingSto)(nil).GetByCondition), ctx, condition)
}

// GetByVendorID mocks base method.
func (m *MockBookingRatingSto) GetByVendorID(ctx context.Context, vendorID, objectType int) ([]entities.BookingRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByVendorID", ctx, vendorID, objectType)
	ret0, _ := ret[0].([]entities.BookingRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByVendorID indicates an expected call of GetByVendorID.
func (mr *MockBookingRatingStoMockRecorder) GetByVendorID(ctx, vendorID, objectType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByVendorID", reflect.TypeOf((*MockBookingRatingSto)(nil).GetByVendorID), ctx, vendorID, objectType)
}

// GetStatisticByObjectID mocks base method.
func (m *MockBookingRatingSto) GetStatisticByObjectID(ctx context.Context, objectId int64, objectType int) ([]entities.StatisticResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticByObjectID", ctx, objectId, objectType)
	ret0, _ := ret[0].([]entities.StatisticResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticByObjectID indicates an expected call of GetStatisticByObjectID.
func (mr *MockBookingRatingStoMockRecorder) GetStatisticByObjectID(ctx, objectId, objectType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticByObjectID", reflect.TypeOf((*MockBookingRatingSto)(nil).GetStatisticByObjectID), ctx, objectId, objectType)
}

// MockAccountSto is a mock of AccountSto interface.
type MockAccountSto struct {
	ctrl     *gomock.Controller
	recorder *MockAccountStoMockRecorder
}

// MockAccountStoMockRecorder is the mock recorder for MockAccountSto.
type MockAccountStoMockRecorder struct {
	mock *MockAccountSto
}

// NewMockAccountSto creates a new mock instance.
func NewMockAccountSto(ctrl *gomock.Controller) *MockAccountSto {
	mock := &MockAccountSto{ctrl: ctrl}
	mock.recorder = &MockAccountStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountSto) EXPECT() *MockAccountStoMockRecorder {
	return m.recorder
}

// GetProfileByID mocks base method.
func (m *MockAccountSto) GetProfileByID(ctx context.Context, id int) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByID", ctx, id)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByID indicates an expected call of GetProfileByID.
func (mr *MockAccountStoMockRecorder) GetProfileByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByID", reflect.TypeOf((*MockAccountSto)(nil).GetProfileByID), ctx, id)
}

// MockPlaceSto is a mock of PlaceSto interface.
type MockPlaceSto struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceStoMockRecorder
}

// MockPlaceStoMockRecorder is the mock recorder for MockPlaceSto.
type MockPlaceStoMockRecorder struct {
	mock *MockPlaceSto
}

// NewMockPlaceSto creates a new mock instance.
func NewMockPlaceSto(ctrl *gomock.Controller) *MockPlaceSto {
	mock := &MockPlaceSto{ctrl: ctrl}
	mock.recorder = &MockPlaceStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceSto) EXPECT() *MockPlaceStoMockRecorder {
	return m.recorder
}

// GetPlaceByID mocks base method.
func (m *MockPlaceSto) GetPlaceByID(ctx context.Context, id int) (*entities.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceByID", ctx, id)
	ret0, _ := ret[0].(*entities.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaceByID indicates an expected call of GetPlaceByID.
func (mr *MockPlaceStoMockRecorder) GetPlaceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceByID", reflect.TypeOf((*MockPlaceSto)(nil).GetPlaceByID), ctx, id)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCache) Delete(ctx context.Context, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, key)
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCache)(nil).Delete), ctx, key)
}

// MockPostGuideSto is a mock of PostGuideSto interface.
type MockPostGuideSto struct {
	ctrl     *gomock.Controller
	recorder *MockPostGuideStoMockRecorder
}

// MockPostGuideStoMockRecorder is the mock recorder for MockPostGuideSto.
type MockPostGuideStoMockRecorder struct {
	mock *MockPostGuideSto
}

// NewMockPostGuideSto creates a new mock instance.
func NewMockPostGuideSto(ctrl *gomock.Controller) *MockPostGuideSto {
	mock := &MockPostGuideSto{ctrl: ctrl}
	mock.recorder = &MockPostGuideStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostGuideSto) EXPECT() *MockPostGuideStoMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockPostGuideSto) GetByID(ctx context.Context, id int) (*entities.PostGuide, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.PostGuide)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPostGuideStoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostGuideSto)(nil).GetByID), ctx, id)
}
