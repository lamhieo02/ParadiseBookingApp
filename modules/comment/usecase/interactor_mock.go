// Code generated by MockGen. DO NOT EDIT.
// Source: interactor.go

// Package commentusecase is a generated GoMock package.
package commentusecase

import (
	context "context"
	entities "paradise-booking/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentStorage is a mock of CommentStorage interface.
type MockCommentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCommentStorageMockRecorder
}

// MockCommentStorageMockRecorder is the mock recorder for MockCommentStorage.
type MockCommentStorageMockRecorder struct {
	mock *MockCommentStorage
}

// NewMockCommentStorage creates a new mock instance.
func NewMockCommentStorage(ctrl *gomock.Controller) *MockCommentStorage {
	mock := &MockCommentStorage{ctrl: ctrl}
	mock.recorder = &MockCommentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentStorage) EXPECT() *MockCommentStorageMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method.
func (m *MockCommentStorage) DeleteByID(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockCommentStorageMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockCommentStorage)(nil).DeleteByID), ctx, id)
}

// GetByPostReviewID mocks base method.
func (m *MockCommentStorage) GetByPostReviewID(ctx context.Context, postReviewID int) ([]*entities.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPostReviewID", ctx, postReviewID)
	ret0, _ := ret[0].([]*entities.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPostReviewID indicates an expected call of GetByPostReviewID.
func (mr *MockCommentStorageMockRecorder) GetByPostReviewID(ctx, postReviewID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPostReviewID", reflect.TypeOf((*MockCommentStorage)(nil).GetByPostReviewID), ctx, postReviewID)
}

// UpdateByID mocks base method.
func (m *MockCommentStorage) UpdateByID(ctx context.Context, id int, data *entities.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockCommentStorageMockRecorder) UpdateByID(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockCommentStorage)(nil).UpdateByID), ctx, id, data)
}

// MockReplyCommentStorage is a mock of ReplyCommentStorage interface.
type MockReplyCommentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockReplyCommentStorageMockRecorder
}

// MockReplyCommentStorageMockRecorder is the mock recorder for MockReplyCommentStorage.
type MockReplyCommentStorageMockRecorder struct {
	mock *MockReplyCommentStorage
}

// NewMockReplyCommentStorage creates a new mock instance.
func NewMockReplyCommentStorage(ctrl *gomock.Controller) *MockReplyCommentStorage {
	mock := &MockReplyCommentStorage{ctrl: ctrl}
	mock.recorder = &MockReplyCommentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplyCommentStorage) EXPECT() *MockReplyCommentStorageMockRecorder {
	return m.recorder
}

// GetBySourceCommentID mocks base method.
func (m *MockReplyCommentStorage) GetBySourceCommentID(ctx context.Context, sourceCommentID int) ([]entities.ReplyComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySourceCommentID", ctx, sourceCommentID)
	ret0, _ := ret[0].([]entities.ReplyComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySourceCommentID indicates an expected call of GetBySourceCommentID.
func (mr *MockReplyCommentStorageMockRecorder) GetBySourceCommentID(ctx, sourceCommentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySourceCommentID", reflect.TypeOf((*MockReplyCommentStorage)(nil).GetBySourceCommentID), ctx, sourceCommentID)
}

// MockAccountStorage is a mock of AccountStorage interface.
type MockAccountStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAccountStorageMockRecorder
}

// MockAccountStorageMockRecorder is the mock recorder for MockAccountStorage.
type MockAccountStorageMockRecorder struct {
	mock *MockAccountStorage
}

// NewMockAccountStorage creates a new mock instance.
func NewMockAccountStorage(ctrl *gomock.Controller) *MockAccountStorage {
	mock := &MockAccountStorage{ctrl: ctrl}
	mock.recorder = &MockAccountStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountStorage) EXPECT() *MockAccountStorageMockRecorder {
	return m.recorder
}

// GetProfileByID mocks base method.
func (m *MockAccountStorage) GetProfileByID(ctx context.Context, id int) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByID", ctx, id)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByID indicates an expected call of GetProfileByID.
func (mr *MockAccountStorageMockRecorder) GetProfileByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByID", reflect.TypeOf((*MockAccountStorage)(nil).GetProfileByID), ctx, id)
}
