// Code generated by MockGen. DO NOT EDIT.
// Source: interactor.go

// Package paymentusecase is a generated GoMock package.
package paymentusecase

import (
	context "context"
	common "paradise-booking/common"
	entities "paradise-booking/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentSto is a mock of PaymentSto interface.
type MockPaymentSto struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentStoMockRecorder
}

// MockPaymentStoMockRecorder is the mock recorder for MockPaymentSto.
type MockPaymentStoMockRecorder struct {
	mock *MockPaymentSto
}

// NewMockPaymentSto creates a new mock instance.
func NewMockPaymentSto(ctrl *gomock.Controller) *MockPaymentSto {
	mock := &MockPaymentSto{ctrl: ctrl}
	mock.recorder = &MockPaymentStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentSto) EXPECT() *MockPaymentStoMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentSto) CreatePayment(ctx context.Context, payment *entities.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentStoMockRecorder) CreatePayment(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentSto)(nil).CreatePayment), ctx, payment)
}

// GetByID mocks base method.
func (m *MockPaymentSto) GetByID(ctx context.Context, id int) (*entities.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPaymentStoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPaymentSto)(nil).GetByID), ctx, id)
}

// GetPaymentByGuider mocks base method.
func (m *MockPaymentSto) GetPaymentByGuider(ctx context.Context, guiderId int, paging *common.Paging) ([]entities.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByGuider", ctx, guiderId, paging)
	ret0, _ := ret[0].([]entities.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByGuider indicates an expected call of GetPaymentByGuider.
func (mr *MockPaymentStoMockRecorder) GetPaymentByGuider(ctx, guiderId, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByGuider", reflect.TypeOf((*MockPaymentSto)(nil).GetPaymentByGuider), ctx, guiderId, paging)
}

// GetPaymentByVendor mocks base method.
func (m *MockPaymentSto) GetPaymentByVendor(ctx context.Context, vendorID int, paging *common.Paging) ([]entities.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByVendor", ctx, vendorID, paging)
	ret0, _ := ret[0].([]entities.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByVendor indicates an expected call of GetPaymentByVendor.
func (mr *MockPaymentStoMockRecorder) GetPaymentByVendor(ctx, vendorID, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByVendor", reflect.TypeOf((*MockPaymentSto)(nil).GetPaymentByVendor), ctx, vendorID, paging)
}

// ListByCondition mocks base method.
func (m *MockPaymentSto) ListByCondition(ctx context.Context, condition map[string]interface{}) ([]entities.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByCondition", ctx, condition)
	ret0, _ := ret[0].([]entities.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByCondition indicates an expected call of ListByCondition.
func (mr *MockPaymentStoMockRecorder) ListByCondition(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByCondition", reflect.TypeOf((*MockPaymentSto)(nil).ListByCondition), ctx, condition)
}

// UpdateByID mocks base method.
func (m *MockPaymentSto) UpdateByID(ctx context.Context, id int, data *entities.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockPaymentStoMockRecorder) UpdateByID(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockPaymentSto)(nil).UpdateByID), ctx, id, data)
}
