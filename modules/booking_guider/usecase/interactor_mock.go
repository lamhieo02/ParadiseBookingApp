// Code generated by MockGen. DO NOT EDIT.
// Source: interactor.go

// Package bookingguiderusecase is a generated GoMock package.
package bookingguiderusecase

import (
	context "context"
	common "paradise-booking/common"
	entities "paradise-booking/entities"
	bookingguideriomodel "paradise-booking/modules/booking_guider/iomodel"
	postguideiomodel "paradise-booking/modules/post_guide/iomodel"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockbookingGuiderStorage is a mock of bookingGuiderStorage interface.
type MockbookingGuiderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockbookingGuiderStorageMockRecorder
}

// MockbookingGuiderStorageMockRecorder is the mock recorder for MockbookingGuiderStorage.
type MockbookingGuiderStorageMockRecorder struct {
	mock *MockbookingGuiderStorage
}

// NewMockbookingGuiderStorage creates a new mock instance.
func NewMockbookingGuiderStorage(ctrl *gomock.Controller) *MockbookingGuiderStorage {
	mock := &MockbookingGuiderStorage{ctrl: ctrl}
	mock.recorder = &MockbookingGuiderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbookingGuiderStorage) EXPECT() *MockbookingGuiderStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockbookingGuiderStorage) Create(ctx context.Context, data *entities.BookingGuider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockbookingGuiderStorageMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockbookingGuiderStorage)(nil).Create), ctx, data)
}

// DeleteByID mocks base method.
func (m *MockbookingGuiderStorage) DeleteByID(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockbookingGuiderStorageMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockbookingGuiderStorage)(nil).DeleteByID), ctx, id)
}

// GetByID mocks base method.
func (m *MockbookingGuiderStorage) GetByID(ctx context.Context, id int) (*entities.BookingGuider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.BookingGuider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockbookingGuiderStorageMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockbookingGuiderStorage)(nil).GetByID), ctx, id)
}

// ListByCondition mocks base method.
func (m *MockbookingGuiderStorage) ListByCondition(ctx context.Context, conditions []common.Condition) ([]*entities.BookingGuider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByCondition", ctx, conditions)
	ret0, _ := ret[0].([]*entities.BookingGuider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByCondition indicates an expected call of ListByCondition.
func (mr *MockbookingGuiderStorageMockRecorder) ListByCondition(ctx, conditions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByCondition", reflect.TypeOf((*MockbookingGuiderStorage)(nil).ListByCondition), ctx, conditions)
}

// ListByFilter mocks base method.
func (m *MockbookingGuiderStorage) ListByFilter(ctx context.Context, paging *common.Paging, filter *bookingguideriomodel.Filter, userId int) ([]entities.BookingGuider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByFilter", ctx, paging, filter, userId)
	ret0, _ := ret[0].([]entities.BookingGuider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByFilter indicates an expected call of ListByFilter.
func (mr *MockbookingGuiderStorageMockRecorder) ListByFilter(ctx, paging, filter, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByFilter", reflect.TypeOf((*MockbookingGuiderStorage)(nil).ListByFilter), ctx, paging, filter, userId)
}

// UpdateStatus mocks base method.
func (m *MockbookingGuiderStorage) UpdateStatus(ctx context.Context, bookingGuiderID, status int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, bookingGuiderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockbookingGuiderStorageMockRecorder) UpdateStatus(ctx, bookingGuiderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockbookingGuiderStorage)(nil).UpdateStatus), ctx, bookingGuiderID, status)
}

// UpdateWithMap mocks base method.
func (m *MockbookingGuiderStorage) UpdateWithMap(ctx context.Context, id int, props map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithMap", ctx, id, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithMap indicates an expected call of UpdateWithMap.
func (mr *MockbookingGuiderStorageMockRecorder) UpdateWithMap(ctx, id, props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithMap", reflect.TypeOf((*MockbookingGuiderStorage)(nil).UpdateWithMap), ctx, id, props)
}

// MockPaymentSto is a mock of PaymentSto interface.
type MockPaymentSto struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentStoMockRecorder
}

// MockPaymentStoMockRecorder is the mock recorder for MockPaymentSto.
type MockPaymentStoMockRecorder struct {
	mock *MockPaymentSto
}

// NewMockPaymentSto creates a new mock instance.
func NewMockPaymentSto(ctrl *gomock.Controller) *MockPaymentSto {
	mock := &MockPaymentSto{ctrl: ctrl}
	mock.recorder = &MockPaymentStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentSto) EXPECT() *MockPaymentStoMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentSto) CreatePayment(ctx context.Context, payment *entities.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentStoMockRecorder) CreatePayment(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentSto)(nil).CreatePayment), ctx, payment)
}

// MockCalendarSto is a mock of CalendarSto interface.
type MockCalendarSto struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarStoMockRecorder
}

// MockCalendarStoMockRecorder is the mock recorder for MockCalendarSto.
type MockCalendarStoMockRecorder struct {
	mock *MockCalendarSto
}

// NewMockCalendarSto creates a new mock instance.
func NewMockCalendarSto(ctrl *gomock.Controller) *MockCalendarSto {
	mock := &MockCalendarSto{ctrl: ctrl}
	mock.recorder = &MockCalendarStoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalendarSto) EXPECT() *MockCalendarStoMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockCalendarSto) GetByID(ctx context.Context, id int) (*entities.CalendarGuider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.CalendarGuider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCalendarStoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCalendarSto)(nil).GetByID), ctx, id)
}

// MockPostGuideUC is a mock of PostGuideUC interface.
type MockPostGuideUC struct {
	ctrl     *gomock.Controller
	recorder *MockPostGuideUCMockRecorder
}

// MockPostGuideUCMockRecorder is the mock recorder for MockPostGuideUC.
type MockPostGuideUCMockRecorder struct {
	mock *MockPostGuideUC
}

// NewMockPostGuideUC creates a new mock instance.
func NewMockPostGuideUC(ctrl *gomock.Controller) *MockPostGuideUC {
	mock := &MockPostGuideUC{ctrl: ctrl}
	mock.recorder = &MockPostGuideUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostGuideUC) EXPECT() *MockPostGuideUCMockRecorder {
	return m.recorder
}

// GetPostGuideByID mocks base method.
func (m *MockPostGuideUC) GetPostGuideByID(ctx context.Context, id int) (*postguideiomodel.GetPostGuideResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostGuideByID", ctx, id)
	ret0, _ := ret[0].(*postguideiomodel.GetPostGuideResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostGuideByID indicates an expected call of GetPostGuideByID.
func (mr *MockPostGuideUCMockRecorder) GetPostGuideByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostGuideByID", reflect.TypeOf((*MockPostGuideUC)(nil).GetPostGuideByID), ctx, id)
}
